#!/usr/bin/env bash
# bak 1.1.1
# Backs up given file or directory

set -euo pipefail  # Fail on any error
Gre='\e[1;32m' Red='\e[1;31m' Mag='\e[1;35m' Yel='\e[1;33m' Blu='\e[1;34m' Rst='\e[0m'

check_version() {
    LocalVer=$(sed -n '2p' "$0" | awk '{print $NF}')
    LatestVer=$(curl -ks "https://que.one/scripts/$(basename $0)" 2>/dev/null | sed -n '2p' | awk '{print $NF}')
    if [[ -n "$LatestVer" && "$LocalVer" < "$LatestVer" ]]; then
        printf "${Yel}==> Warning: Running older ${Rst}${Red}v${LocalVer}${Rst} ${Yel}version "
        printf "of this script. Please update to latest${Rst} ${Gre}v${LatestVer}${Rst}\n"
    fi
}

check_version

if [[ ! -d "$1" && ! -f "$1" ]]; then
    printf "Usage: `basename $0` <File|Directory>\n"
    exit 1
fi

nextLetter() {
    local Rest Letters=abcdefghijklmnopqrstuvwxyz
    Rest=${Letters#*$1}
    echo ${Rest:0:1}
}

DateStr="$(date +%Y%m%d)"
Target="${1}.${DateStr}a"

while [[ -d "$Target" || -e "$Target" ]]; do
    Letter=${Target:(-1)}
    if [[ "$Letter" == "z" ]]; then
        printf "Too many backups (z).\n"
        exit 1
    fi
    Target="${1}.${DateStr}$(nextLetter $Letter)"
done

cp -a "$1" "$Target"
exit 0

